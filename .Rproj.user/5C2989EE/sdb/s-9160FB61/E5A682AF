{
    "contents" : "\n\n# Counter\n# A server parameters\nSP <- list()\n# Record the number of poeple who have used the app\n#    since initiation on the server\nSP$npers <- 0\n\noriginaldata <- Davis$weight\n\nshinyServer(  function(input, output){\n  \n  # Counter\n  # shinyServer is Started up every time the domain is called.\n  # Use <<- to assign to the global server environment.\n  SP$npers <<- SP$npers + 1\n  # shinyServer is Started up every time the domain is called.\n  # Use <<- to assign to the global server environment.\n  SP$npers <<- SP$npers + 1\n  output$hits <- renderText({\n    paste0(\"Pageviews: \" , SP$npers)\n  })\n  \n\n  type=T\n  name <- \"weight\"\n  Davis2 <- Davis\n  \n  \n \noutput$plot <- renderPlot({\n  if(input$transformation==\"center\"){\n    Davis$weight <- Davis$weight-mean(Davis$weight)\n    name <- \"weight - mean(weight)\"\n  }\n  if(input$transformation==\"divided by 10\"){\n    Davis$weight <- Davis$weight/10\n    name <- \"weight/10\"\n  }\n  if(input$transformation==\"mininum to 0\"){\n    Davis$weight <- Davis$weight-min(Davis$weight)\n    name <- \"weight - min(weight)\"\n  }\n  if(input$transformation==\"reverse\"){\n    Davis$weight <- abs(Davis$weight-max(Davis$weight))\n    name <- \"|weight - max(weight)|\"\n  }\n  if(input$transformation==\"standardize\"){\n    Davis$weight <- (Davis$weight-mean(Davis$weight))/sd(Davis$weight)\n    name <- \"[weight - mean(weight)]/sd(weight)\"\n  }     \n  \n  if(input$original.scale==\"no\"){\n    par(mar=c(5,5,2,1))\n    hist(Davis$weight, xaxt=\"n\", breaks=14, cex.axis=2, cex.lab=2, cex.main=2, freq=type, xlab=name, main=\"Histogram (+ transformation)\", col=\"#FF5C5C22\", ylim = c(0,70))\n    hist(originaldata, xaxt=\"n\", breaks=14, cex.axis=2, cex.lab=2, cex.main=2, freq=type, xlab=\"\", main=\"\", col = \"#003DF540\", add=TRUE, ylim = c(0,70))\n    if(input$transformation!=\"divided by 10\"){axis(1, at=seq(-170, 170,10), labels=seq(-170, 170,10), cex.axis=2)}\n    if(input$transformation==\"divided by 10\"){\n      axis(1, at=seq(-17, 17,1), labels=seq(-17, 17,1), cex.axis=2)\n    }    \n  }\n  \n  if(input$original.scale==\"yes (-50 to 170)\"){\n    par(mar=c(5,5,2,1))\n    hist(Davis$weight, xaxt=\"n\", breaks=14, cex.axis=2, cex.lab=2, cex.main=2, freq=type, xlab=name, main=\"Histogram (+ transformation)\", xlim=c(-50, 170), col=\"#FF5C5C22\", ylim = c(0,70))\n    hist(originaldata, xaxt=\"n\", breaks=14, cex.axis=2, cex.lab=2, cex.main=2, freq=type, xlab=\"\", main=\"\", col = \"#003DF540\", add=TRUE, ylim = c(0,70))\n    axis(1, at=seq(-170, 170,10), labels=seq(-170, 170,10), cex.axis=2)\n  }      \n  \n}, height=400)\n\n\n\n\n\n\noutput$transformeddata <- renderPrint({  \n\n\n  \n  if(input$transformation==\"center\"){\n    Davis$weight <- Davis$weight-mean(Davis$weight)\n    name <- \"weight - mean(weight)\"\n  }\n  if(input$transformation==\"divided by 10\"){\n    Davis$weight <- Davis$weight/10\n    name <- \"weight/10\"\n  }\n  if(input$transformation==\"mininum to 0\"){\n    Davis$weight <- Davis$weight-min(Davis$weight)\n    name <- \"weight - min(weight)\"\n  }\n  if(input$transformation==\"reverse\"){\n    Davis$weight <- abs(Davis$weight-max(Davis$weight))\n    name <- \"|weight - max(weight)|\"\n  }\n  if(input$transformation==\"standardize\"){\n    Davis$weight <- (Davis$weight-mean(Davis$weight))/sd(Davis$weight)\n    name <- \"[weight - mean(weight)]/sd(weight)\"\n  }\n  \n  \n  Davis[c(1:10),c(1,2)]\n})\n\n\noutput$summary <- renderPrint({  \n  \n  \n  # SUMMARY STATISTICS\n  summary(Davis2[,2])\n  \n})\n\n\noutput$originaldata <- renderPrint({  \n  \n  \n  # SUMMARY STATISTICS\n  Davis2[c(1:10),c(1,2)]\n})\n\n\n\n})\n",
    "created" : 1446852015742.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3204708598",
    "id" : "E5A682AF",
    "lastKnownWriteTime" : 1446852608,
    "path" : "C:/Users/paul/Google Drive/Packages/transformations_of_variables/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}